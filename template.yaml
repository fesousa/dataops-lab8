AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: A starter AWS Lambda function.
Resources:
  S3BucketEntrega:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: PublicRead
      BucketName: dataops-entrega-fernandosousa
      WebsiteConfiguration:
        IndexDocument: index.html
  BucketEntregaPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketEntrega
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3BucketEntrega  
                - /*
            Principal: '*'
            Sid: 'PublicReadGetObject'
  ApiGatewayEntrega:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      OpenApiVersion: '2.0'
  # Criar função lambda
  LambdaEntrega:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: test-chats #nome da função
      Handler: charts.handler # nome do arquivo e método de onde está a função
      Runtime: python3.7 # ambiente de execução
      CodeUri: ./app # local onde estarão os arquivos da função
      Description: Gráficos.
      MemorySize: 256 # memória utilizada pela funçãop
      Timeout: 30 # tempo máximo de execução, em segundos
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/LabRole # IAM role da função para permissões a outros recursos da AWS
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId:
              Ref: ApiGatewayEntrega
Outputs:
  WebsiteURL:
    Value: !GetAtt
      - S3Entrega 
      - WebsiteURL
    Description: URL do site no S3
  S3BucketSecureURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - S3Entrega
          - DomainName
    Description: Nome no bucket S3